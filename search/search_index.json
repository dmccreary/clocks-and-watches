{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MicroPython Clocks and Watches This website is dedicated to students who want to learn how to design their own digital clocks and watches using Python. It contains instructions for finding low-cost parts and creating your own custom clock and watch displays. These projects have only recently been possible due to the following developments: The support of highly optimized drawing of complex ellipse and polygon shapes by the MicroPython runtime at version 19 was announced in early 2023. The ability of clocks to synchronize with centralized time services using standard WiFi networks using the $5 Raspberry Pi Pico W. The availability of low-cost high-contrast OLED and TFT displays for as low as $7 each. Our goal is to provide fun ways to teach computational thinking to a wide variety of students from 6th to 12th grade. If you can type we have fun lesson plans from drawing simple shapes to complex clock and watch face designs. If you have any comments or feedback, please feel free to post these to our GitHub Issues . Good Luck! Dan McCreary on LinkedIn Demo code for the Waveshare RP2040 watch display. Waveshare RP2040-LCD-1.28 Ebay Listing for $21","title":"Home"},{"location":"#micropython-clocks-and-watches","text":"This website is dedicated to students who want to learn how to design their own digital clocks and watches using Python. It contains instructions for finding low-cost parts and creating your own custom clock and watch displays. These projects have only recently been possible due to the following developments: The support of highly optimized drawing of complex ellipse and polygon shapes by the MicroPython runtime at version 19 was announced in early 2023. The ability of clocks to synchronize with centralized time services using standard WiFi networks using the $5 Raspberry Pi Pico W. The availability of low-cost high-contrast OLED and TFT displays for as low as $7 each. Our goal is to provide fun ways to teach computational thinking to a wide variety of students from 6th to 12th grade. If you can type we have fun lesson plans from drawing simple shapes to complex clock and watch face designs. If you have any comments or feedback, please feel free to post these to our GitHub Issues . Good Luck! Dan McCreary on LinkedIn Demo code for the Waveshare RP2040 watch display. Waveshare RP2040-LCD-1.28 Ebay Listing for $21","title":"MicroPython Clocks and Watches"},{"location":"contact/","text":"Contact Dan McCreary on LinkedIn","title":"Contact"},{"location":"contact/#contact","text":"Dan McCreary on LinkedIn","title":"Contact"},{"location":"references/","text":"References watchmaker Makerfabs GC9A01 1.28 Inch Round LCD Module Dronebotworksho Using GC9A01 Round LCD Modules DroneBot Workshop YouTube Video Mr. Volt YouTube Exotic Round Displays and How to Use Them - this videos demonstrates some very new round displays up to 5 inches. These would be ideal for robot faces but they cost up to $200 for the larger displays.","title":"References"},{"location":"references/#references","text":"watchmaker Makerfabs GC9A01 1.28 Inch Round LCD Module Dronebotworksho Using GC9A01 Round LCD Modules DroneBot Workshop YouTube Video Mr. Volt YouTube Exotic Round Displays and How to Use Them - this videos demonstrates some very new round displays up to 5 inches. These would be ideal for robot faces but they cost up to $200 for the larger displays.","title":"References"},{"location":"lessons/01-get-local-time/","text":"Getting Local Time Lesson Overview In this lesson, we will learn how to get the local date and time from the MicroPython runtime. We will learn the components of the list of numbers returned by these functions. MicroPython provides a very convenient function called localtime() that will get the time from the host computer that you connect to via your USB cable. Your local computer has a clock and knows the time in the local timezone. This information is sent to MicroPython runtime when the computer is connected to the USB cable. Note The gmtime() function returns the time in UTC (Coordinated Universal Time) time. Use this if you want time stamps that are not dependent on time zone and daylight savings rules. For example, log files should use this function. Sample Code 1 2 3 import time print ( time . localtime ()) Result 1 (2023, 2, 28, 18, 54, 7, 1, 59) Format of the Localtime The format is a \"8-tuple\" in the format (year, month, mday, hour, minute, second, weekday, yearday) Printing Formatted Dates Sample Code 1 2 3 4 5 6 7 8 9 10 import time now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) for i in range ( 8 ): print ( label [ i ], ':' , now [ i ]) print () print ( \"Date: {} / {} / {} \" . format ( now [ 1 ], now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} \" . format ( now [ 3 ], now [ 4 ])) Results 1 2 3 4 5 6 7 8 9 10 11 year : 2023 month : 2 mday : 28 hour : 19 minute : 20 second : 26 weekday : 1 yearday : 59 Date: 2/28/2023 Time: 19:20 Label Formatting We can also add labels to make the date and time easier to read. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import time days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) month_number = now [ 1 ] month_name = months [ month_number ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' print () print ( \"Date: {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} {} \" . format ( hour_12 , now [ 4 ], am_pm )) Label Formatted Results 1 2 Date: Tuesday March 28, 2023 Time: 7:46 pm References MicroPython Time Documents","title":"Get Local Time"},{"location":"lessons/01-get-local-time/#getting-local-time","text":"","title":"Getting Local Time"},{"location":"lessons/01-get-local-time/#lesson-overview","text":"In this lesson, we will learn how to get the local date and time from the MicroPython runtime. We will learn the components of the list of numbers returned by these functions. MicroPython provides a very convenient function called localtime() that will get the time from the host computer that you connect to via your USB cable. Your local computer has a clock and knows the time in the local timezone. This information is sent to MicroPython runtime when the computer is connected to the USB cable. Note The gmtime() function returns the time in UTC (Coordinated Universal Time) time. Use this if you want time stamps that are not dependent on time zone and daylight savings rules. For example, log files should use this function.","title":"Lesson Overview"},{"location":"lessons/01-get-local-time/#sample-code","text":"1 2 3 import time print ( time . localtime ())","title":"Sample Code"},{"location":"lessons/01-get-local-time/#result","text":"1 (2023, 2, 28, 18, 54, 7, 1, 59)","title":"Result"},{"location":"lessons/01-get-local-time/#format-of-the-localtime","text":"The format is a \"8-tuple\" in the format (year, month, mday, hour, minute, second, weekday, yearday)","title":"Format of the Localtime"},{"location":"lessons/01-get-local-time/#printing-formatted-dates","text":"","title":"Printing Formatted Dates"},{"location":"lessons/01-get-local-time/#sample-code_1","text":"1 2 3 4 5 6 7 8 9 10 import time now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) for i in range ( 8 ): print ( label [ i ], ':' , now [ i ]) print () print ( \"Date: {} / {} / {} \" . format ( now [ 1 ], now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} \" . format ( now [ 3 ], now [ 4 ]))","title":"Sample Code"},{"location":"lessons/01-get-local-time/#results","text":"1 2 3 4 5 6 7 8 9 10 11 year : 2023 month : 2 mday : 28 hour : 19 minute : 20 second : 26 weekday : 1 yearday : 59 Date: 2/28/2023 Time: 19:20","title":"Results"},{"location":"lessons/01-get-local-time/#label-formatting","text":"We can also add labels to make the date and time easier to read. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import time days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) month_number = now [ 1 ] month_name = months [ month_number ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' print () print ( \"Date: {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} {} \" . format ( hour_12 , now [ 4 ], am_pm ))","title":"Label Formatting"},{"location":"lessons/01-get-local-time/#label-formatted-results","text":"1 2 Date: Tuesday March 28, 2023 Time: 7:46 pm","title":"Label Formatted Results"},{"location":"lessons/01-get-local-time/#references","text":"MicroPython Time Documents","title":"References"},{"location":"lessons/02-display-text/","text":"Display Time and Date in Text 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from utime import localtime , sleep from LCD_1inch28 import LCD_1inch28 LCD = LCD_1inch28 () days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) def format_time ( now ): hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' minutes_num = now [ 4 ] if minutes_num < 10 : min_leading_zero = '0' else : min_leading_zero = '' seconds_num = now [ 5 ] if seconds_num < 10 : sec_leading_zero = '0' else : sec_leading_zero = '' return \" {} : {}{} : {}{} {} \" . format ( hour_12 , min_leading_zero , minutes_num , sec_leading_zero , seconds_num , am_pm ) def format_date ( now ): month_number = now [ 1 ] month_name = months [ month_number - 1 ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] return \" {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ]) while ( True ): now = localtime () # print(now) LCD . fill ( LCD . black ) LCD . text ( format_time ( now ), 77 , 50 , LCD . white ) LCD . text ( format_date ( now ), 40 , 80 , LCD . white ) LCD . show () sleep ( 1 )","title":"Display Text"},{"location":"lessons/02-display-text/#display-time-and-date-in-text","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from utime import localtime , sleep from LCD_1inch28 import LCD_1inch28 LCD = LCD_1inch28 () days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) def format_time ( now ): hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' minutes_num = now [ 4 ] if minutes_num < 10 : min_leading_zero = '0' else : min_leading_zero = '' seconds_num = now [ 5 ] if seconds_num < 10 : sec_leading_zero = '0' else : sec_leading_zero = '' return \" {} : {}{} : {}{} {} \" . format ( hour_12 , min_leading_zero , minutes_num , sec_leading_zero , seconds_num , am_pm ) def format_date ( now ): month_number = now [ 1 ] month_name = months [ month_number - 1 ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] return \" {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ]) while ( True ): now = localtime () # print(now) LCD . fill ( LCD . black ) LCD . text ( format_time ( now ), 77 , 50 , LCD . white ) LCD . text ( format_date ( now ), 40 , 80 , LCD . white ) LCD . show () sleep ( 1 )","title":"Display Time and Date in Text"},{"location":"lessons/03-drawing-face/","text":"Drawing Watch Faces We use the MicroPython poly() function to draw polygons on the screen.","title":"Drawing Watch Faces"},{"location":"lessons/03-drawing-face/#drawing-watch-faces","text":"We use the MicroPython poly() function to draw polygons on the screen.","title":"Drawing Watch Faces"},{"location":"lessons/04-larger-fonts/","text":"Larger Fonts Font to Py Command Sample Font Files References Peter Hinch's Font to Python Utility - a utility takes input a font file in ttf or otf form together with a height in pixels and outputs a Python source file containing the font as a bitmap. Peter Hinch's Nano GUI Les' Lab: Designing your own Pico fonts - Raspberry Pi Pico display fonts in MicroPython: How to design fonts for your Pi Pico project.","title":"Larger Fonts"},{"location":"lessons/04-larger-fonts/#larger-fonts","text":"Font to Py Command Sample Font Files","title":"Larger Fonts"},{"location":"lessons/04-larger-fonts/#references","text":"Peter Hinch's Font to Python Utility - a utility takes input a font file in ttf or otf form together with a height in pixels and outputs a Python source file containing the font as a bitmap. Peter Hinch's Nano GUI Les' Lab: Designing your own Pico fonts - Raspberry Pi Pico display fonts in MicroPython: How to design fonts for your Pi Pico project.","title":"References"},{"location":"lessons/05-draw-performance/","text":"Drawing Performance One of the challenges we face when updating the watch display is that refreshing an entire screen using a relatively slow SPI interface means that we need to be thoughtful about updating the displays. By default, many screen drivers update every pixel of the screen when the user does a show() operation. For small monochrome screens this is not usually a problem. But for larger color screens the draw times can lead to slow updates. Let's do a little math to see when drawing performance becomes a problem. Remember that the human eye can's really see screen updates that occur faster than about 30 frames per second. That is why most film movies were filled at 25 frames per second. To calculate the full-screen draw time we need to calculate the total number of bits we need to send and then calculate the time it takes to send these bits. We can then check our math by looking at timestamps just before we draw and after we finish the drawing. Let's start out with our favorite clock screen: the 128X64 monochrome OLED screen. Width = 128 Height = 64 Bits per Pixel = 1 Total bits = 128 * 64 * 1 = 8,192 bits = 1024 bytes Now we need to also know the transfer speed of our display interface. Although there are both I2C and SPI versions of these displays, we usually prefer the SPI that should transfer data at about Pi Pico SPI LCD using a frame buffer to get 30fps animation - ILI9341 and ST7789 MicroPython drivers Sample Timer Code We can calculate the time to draw the full screen by recording the number of clock ticks in microseconds before and after we do a screen update. 1 2 3 4 5 6 from utime import ticks_us start = ticks_us () screen_update () end = ticks_us () print ( 'Execution time in microseconds:' , end - start ) On the OLED screen, we get a result that is around 10 milliseconds which is 100 screen updates per second. References Notes on the very slow refresh rate for ST7735","title":"Drawing Performance"},{"location":"lessons/05-draw-performance/#drawing-performance","text":"One of the challenges we face when updating the watch display is that refreshing an entire screen using a relatively slow SPI interface means that we need to be thoughtful about updating the displays. By default, many screen drivers update every pixel of the screen when the user does a show() operation. For small monochrome screens this is not usually a problem. But for larger color screens the draw times can lead to slow updates. Let's do a little math to see when drawing performance becomes a problem. Remember that the human eye can's really see screen updates that occur faster than about 30 frames per second. That is why most film movies were filled at 25 frames per second. To calculate the full-screen draw time we need to calculate the total number of bits we need to send and then calculate the time it takes to send these bits. We can then check our math by looking at timestamps just before we draw and after we finish the drawing. Let's start out with our favorite clock screen: the 128X64 monochrome OLED screen. Width = 128 Height = 64 Bits per Pixel = 1 Total bits = 128 * 64 * 1 = 8,192 bits = 1024 bytes Now we need to also know the transfer speed of our display interface. Although there are both I2C and SPI versions of these displays, we usually prefer the SPI that should transfer data at about Pi Pico SPI LCD using a frame buffer to get 30fps animation - ILI9341 and ST7789 MicroPython drivers","title":"Drawing Performance"},{"location":"lessons/05-draw-performance/#sample-timer-code","text":"We can calculate the time to draw the full screen by recording the number of clock ticks in microseconds before and after we do a screen update. 1 2 3 4 5 6 from utime import ticks_us start = ticks_us () screen_update () end = ticks_us () print ( 'Execution time in microseconds:' , end - start ) On the OLED screen, we get a result that is around 10 milliseconds which is 100 screen updates per second.","title":"Sample Timer Code"},{"location":"lessons/05-draw-performance/#references","text":"Notes on the very slow refresh rate for ST7735","title":"References"},{"location":"setup/parts/","text":"Suggested Parts for a MicroPython Watch These are sample links that may not work after the inventory is sold out. Use the keywords in the product descriptions to find similar items. The links were generated in September of 2023. Displays 1.28\" 240x240 CG9A01 TFT Displays Round 1.28 inch TFT LCD Display Module RGB IPS HD 240x240 SPI GC9A01 $5.10 each when you buy 3 or more with $4 shipping. Amazon Teyleten Robot 1.28 Inch TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 PCB - 3 displays for $18.99 - about $6.33 per display Amazon AITRIP 2PCS 1.28 Inch 1.28'' TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 PCB - Two displays for $14.99 using the GC9A01 chip - about $7.50 per display Amazon D-FLIFE 3pcs 1.28 Inch TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 Amazon Waveshare 1.28inch Round LCD 240\u00d7240 Resolution 65K RGB IPS Display Module for Arduino Raspberry Pi Jetson Nano STM32,SPI Interface GC9A01 Driver Clear and Colorful Displaying Effect $21.00 Ebay 1.28\" inch TFT LCD Round Display RGB 3-5V 240*240 GC9A01 Teyleten Robot 1.28 Inch TFT LCD Display Module Round RGB 240*240 GC9A01 Driver $7.00 each Breadboards Jumper Wires Raspberry Pi Picos RP2040 watches 1.28\" Round Watch Rp2040 Development Board TFT Display Module With Strap DIY","title":"Parts"},{"location":"setup/parts/#suggested-parts-for-a-micropython-watch","text":"These are sample links that may not work after the inventory is sold out. Use the keywords in the product descriptions to find similar items. The links were generated in September of 2023.","title":"Suggested Parts for a MicroPython Watch"},{"location":"setup/parts/#displays","text":"","title":"Displays"},{"location":"setup/parts/#128-240x240-cg9a01-tft-displays","text":"Round 1.28 inch TFT LCD Display Module RGB IPS HD 240x240 SPI GC9A01 $5.10 each when you buy 3 or more with $4 shipping. Amazon Teyleten Robot 1.28 Inch TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 PCB - 3 displays for $18.99 - about $6.33 per display Amazon AITRIP 2PCS 1.28 Inch 1.28'' TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 PCB - Two displays for $14.99 using the GC9A01 chip - about $7.50 per display Amazon D-FLIFE 3pcs 1.28 Inch TFT LCD Display Module Round RGB 240 * 240 GC9A01 Driver 4 Wire SPI Interface 240x240 Amazon Waveshare 1.28inch Round LCD 240\u00d7240 Resolution 65K RGB IPS Display Module for Arduino Raspberry Pi Jetson Nano STM32,SPI Interface GC9A01 Driver Clear and Colorful Displaying Effect $21.00 Ebay 1.28\" inch TFT LCD Round Display RGB 3-5V 240*240 GC9A01 Teyleten Robot 1.28 Inch TFT LCD Display Module Round RGB 240*240 GC9A01 Driver $7.00 each","title":"1.28\" 240x240 CG9A01 TFT Displays"},{"location":"setup/parts/#breadboards","text":"","title":"Breadboards"},{"location":"setup/parts/#jumper-wires","text":"","title":"Jumper Wires"},{"location":"setup/parts/#raspberry-pi-picos","text":"","title":"Raspberry Pi Picos"},{"location":"setup/parts/#rp2040-watches","text":"1.28\" Round Watch Rp2040 Development Board TFT Display Module With Strap DIY","title":"RP2040 watches"}]}