{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MicroPython Watch Demo code for the Waveshare RP2040 watch display. Waveshare RP2040-LCD-1.28 Ebay Listing for $21","title":"Home"},{"location":"#micropython-watch","text":"Demo code for the Waveshare RP2040 watch display. Waveshare RP2040-LCD-1.28 Ebay Listing for $21","title":"MicroPython Watch"},{"location":"contact/","text":"Contact Dan McCreary on LinkedIn","title":"Contact"},{"location":"contact/#contact","text":"Dan McCreary on LinkedIn","title":"Contact"},{"location":"lessons/01-get-local-time/","text":"Getting Local Time Lesson Overview In this lesson, we will learn how to get the local date and time from the MicroPython runtime. We will learn the components of the list of numbers returned by these functions. MicroPython provides a very convenient function called localtime() that will get the time from the host computer that you connect to via your USB cable. Your local computer has a clock and knows the time in the local timezone. This information is sent to MicroPython runtime when the computer is connected to the USB cable. Note The gmtime() function returns the time in UTC (Coordinated Universal Time) time. Use this if you want time stamps that are not dependent on time zone and daylight savings rules. For example, log files should use this function. Sample Code 1 2 3 import time print ( time . localtime ()) Result 1 (2023, 2, 28, 18, 54, 7, 1, 59) Format of the Localtime The format is a \"8-tuple\" in the format (year, month, mday, hour, minute, second, weekday, yearday) Printing Formatted Dates Sample Code 1 2 3 4 5 6 7 8 9 10 import time now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) for i in range ( 8 ): print ( label [ i ], ':' , now [ i ]) print () print ( \"Date: {} / {} / {} \" . format ( now [ 1 ], now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} \" . format ( now [ 3 ], now [ 4 ])) Results 1 2 3 4 5 6 7 8 9 10 11 year : 2023 month : 2 mday : 28 hour : 19 minute : 20 second : 26 weekday : 1 yearday : 59 Date: 2/28/2023 Time: 19:20 Label Formatting We can also add labels to make the date and time easier to read. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import time days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) month_number = now [ 1 ] month_name = months [ month_number ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' print () print ( \"Date: {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} {} \" . format ( hour_12 , now [ 4 ], am_pm )) Label Formatted Results 1 2 Date: Tuesday March 28, 2023 Time: 7:46 pm References MicroPython Time Documents","title":"Getting Local Time"},{"location":"lessons/01-get-local-time/#getting-local-time","text":"","title":"Getting Local Time"},{"location":"lessons/01-get-local-time/#lesson-overview","text":"In this lesson, we will learn how to get the local date and time from the MicroPython runtime. We will learn the components of the list of numbers returned by these functions. MicroPython provides a very convenient function called localtime() that will get the time from the host computer that you connect to via your USB cable. Your local computer has a clock and knows the time in the local timezone. This information is sent to MicroPython runtime when the computer is connected to the USB cable. Note The gmtime() function returns the time in UTC (Coordinated Universal Time) time. Use this if you want time stamps that are not dependent on time zone and daylight savings rules. For example, log files should use this function.","title":"Lesson Overview"},{"location":"lessons/01-get-local-time/#sample-code","text":"1 2 3 import time print ( time . localtime ())","title":"Sample Code"},{"location":"lessons/01-get-local-time/#result","text":"1 (2023, 2, 28, 18, 54, 7, 1, 59)","title":"Result"},{"location":"lessons/01-get-local-time/#format-of-the-localtime","text":"The format is a \"8-tuple\" in the format (year, month, mday, hour, minute, second, weekday, yearday)","title":"Format of the Localtime"},{"location":"lessons/01-get-local-time/#printing-formatted-dates","text":"","title":"Printing Formatted Dates"},{"location":"lessons/01-get-local-time/#sample-code_1","text":"1 2 3 4 5 6 7 8 9 10 import time now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) for i in range ( 8 ): print ( label [ i ], ':' , now [ i ]) print () print ( \"Date: {} / {} / {} \" . format ( now [ 1 ], now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} \" . format ( now [ 3 ], now [ 4 ]))","title":"Sample Code"},{"location":"lessons/01-get-local-time/#results","text":"1 2 3 4 5 6 7 8 9 10 11 year : 2023 month : 2 mday : 28 hour : 19 minute : 20 second : 26 weekday : 1 yearday : 59 Date: 2/28/2023 Time: 19:20","title":"Results"},{"location":"lessons/01-get-local-time/#label-formatting","text":"We can also add labels to make the date and time easier to read. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import time days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) now = time . localtime () label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) month_number = now [ 1 ] month_name = months [ month_number ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' print () print ( \"Date: {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ])) print ( \"Time: {} : {} {} \" . format ( hour_12 , now [ 4 ], am_pm ))","title":"Label Formatting"},{"location":"lessons/01-get-local-time/#label-formatted-results","text":"1 2 Date: Tuesday March 28, 2023 Time: 7:46 pm","title":"Label Formatted Results"},{"location":"lessons/01-get-local-time/#references","text":"MicroPython Time Documents","title":"References"},{"location":"lessons/02-display-time-date/","text":"Display Time and Date in Text 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from utime import localtime , sleep from LCD_1inch28 import LCD_1inch28 LCD = LCD_1inch28 () days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) def format_time ( now ): hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' minutes_num = now [ 4 ] if minutes_num < 10 : min_leading_zero = '0' else : min_leading_zero = '' seconds_num = now [ 5 ] if seconds_num < 10 : sec_leading_zero = '0' else : sec_leading_zero = '' return \" {} : {}{} : {}{} {} \" . format ( hour_12 , min_leading_zero , minutes_num , sec_leading_zero , seconds_num , am_pm ) def format_date ( now ): month_number = now [ 1 ] month_name = months [ month_number - 1 ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] return \" {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ]) while ( True ): now = localtime () # print(now) LCD . fill ( LCD . black ) LCD . text ( format_time ( now ), 77 , 50 , LCD . white ) LCD . text ( format_date ( now ), 40 , 80 , LCD . white ) LCD . show () sleep ( 1 )","title":"Display Time and Date in Text"},{"location":"lessons/02-display-time-date/#display-time-and-date-in-text","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from utime import localtime , sleep from LCD_1inch28 import LCD_1inch28 LCD = LCD_1inch28 () days = ( 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ) months = ( 'Jan' , 'Feb' , 'March' , 'April' , 'May' , 'June' , 'July' , 'Aug' , 'Sept' , 'Oct' , 'Nov' , 'Dec' ) label = ( 'year' , 'month' , 'mday' , 'hour' , 'minute' , 'second' , 'weekday' , 'yearday' ) def format_time ( now ): hour_number = now [ 3 ] if hour_number < 13 : hour_12 = hour_number am_pm = 'am' else : hour_12 = hour_number - 12 am_pm = 'pm' minutes_num = now [ 4 ] if minutes_num < 10 : min_leading_zero = '0' else : min_leading_zero = '' seconds_num = now [ 5 ] if seconds_num < 10 : sec_leading_zero = '0' else : sec_leading_zero = '' return \" {} : {}{} : {}{} {} \" . format ( hour_12 , min_leading_zero , minutes_num , sec_leading_zero , seconds_num , am_pm ) def format_date ( now ): month_number = now [ 1 ] month_name = months [ month_number - 1 ] weekday_number = now [ 6 ] day_name = days [ weekday_number ] hour_number = now [ 3 ] return \" {} {} {} , {} \" . format ( day_name , month_name , now [ 2 ], now [ 0 ]) while ( True ): now = localtime () # print(now) LCD . fill ( LCD . black ) LCD . text ( format_time ( now ), 77 , 50 , LCD . white ) LCD . text ( format_date ( now ), 40 , 80 , LCD . white ) LCD . show () sleep ( 1 )","title":"Display Time and Date in Text"}]}